source('~/Desktop/Info201/a6-apis-slayers/process-data.R')
source('~/Desktop/Info201/a6-apis-slayers/process-data.R')
source('~/Desktop/Info201/a6-apis-slayers/process-data.R')
source('~/Desktop/Info201/a6-apis-slayers/process-data.R')
getwd()
source('~/Desktop/Info201/a6-apis-slayers/process-data.R')
setwd("~/Documents")
source('~/Desktop/Info201/a6-apis-slayers/process-data.R')
draw_table("Bend, Oregon")
source('~/Desktop/Info201/a6-apis-slayers/process-data.R')
officials_table <-  parsed_data$officials
source('~/Desktop/Info201/a6-apis-slayers/process-data.R')
base_uri <- "https://www.googleapis.com/civicinfo/v2"
resource <- "/representatives"
query_params <- list(
key = api_key, address = given_address
)
address <- query_params[["address"]]
response <- GET(paste0(base_uri,resource), query = query_params)
parsed_data <- fromJSON(response_content)
officials_table <-  parsed_data$officials
offices_table <- parsed_data$offices
party_col <- officials_table$party
b <- unnest(offices_table, officialIndices)
position_col <- b$name
names_col <- officials_table$name
phones_col <- officials_table$phones
name_url <- officials_table$urls
report <- data.frame("Position" = position_col, "Name" = names_col, "Party" = party_col, "Emails" = emails_col, "Phones" = phones_col,
"Photos" = ifelse(photos_col == "-", "-", paste0("![](", photos_col, ",)")))
report
draw_table <- function(given_address){
base_uri <- "https://www.googleapis.com/civicinfo/v2"
resource <- "/representatives"
query_params <- list(
key = api_key, address = given_address
)
address <- query_params[["address"]]
response <- GET(paste0(base_uri,resource), query = query_params)
response_content <- content(response, "text")
parsed_data <- fromJSON(response_content)
officials_table <-  parsed_data$officials
offices_table <- parsed_data$offices
officials_table <- officials_table %>%
rowwise() %>%
mutate(emails = ifelse(is.null(emails), "-", emails)) %>%
mutate(phones = ifelse(is.null(phones), "-", phones)) %>%
mutate(urls = ifelse(is.null(urls), "-", urls)) %>%
mutate(party = ifelse(is.na(party), "-", party)) %>%
mutate(photoUrl) = ifelse(is.na(photoUrl), "-", photoUrl)
party_col <- officials_table$party
b <- unnest(offices_table, officialIndices)
position_col <- b$name
emails_col <- officials_table$emails
names_col <- officials_table$name
phones_col <- officials_table$phones
name_url <- officials_table$urls
photos_col <- officials_table$photoUrl
report <- data.frame("Position" = position_col, "Name" = names_col, "Party" = party_col, "Emails" = emails_col, "Phones" = phones_col,
"Photos" = ifelse(photos_col == "-", "-", paste0("![](", photos_col, ",)")))
report
}
## 2. extract the elected officials' data from the result
## 2. extract the elected officials' data from the result
##    The data contains many relevant variables, including normalized address,
## 2. extract the elected officials' data from the result
##    The data contains many relevant variables, including normalized address,
##    'offices' and 'officials'.  In order to attach the officials (people)
## 2. extract the elected officials' data from the result
##    The data contains many relevant variables, including normalized address,
##    'offices' and 'officials'.  In order to attach the officials (people)
##    with offices (jobs), I recommend to use dplyr joins (what would be the key?)
##    More about joins in
## 2. extract the elected officials' data from the result
##    The data contains many relevant variables, including normalized address,
##    'offices' and 'officials'.  In order to attach the officials (people)
##    with offices (jobs), I recommend to use dplyr joins (what would be the key?)
##    More about joins in
##    http://r4ds.had.co.nz/relational-data.html
## 2. extract the elected officials' data from the result
##    The data contains many relevant variables, including normalized address,
##    'offices' and 'officials'.  In order to attach the officials (people)
##    with offices (jobs), I recommend to use dplyr joins (what would be the key?)
##    More about joins in
##    http://r4ds.had.co.nz/relational-data.html
## 3. transform the data into a well formatted table
## 2. extract the elected officials' data from the result
##    The data contains many relevant variables, including normalized address,
##    'offices' and 'officials'.  In order to attach the officials (people)
##    with offices (jobs), I recommend to use dplyr joins (what would be the key?)
emails_col <- officials_table$emails
officials_table <- officials_table %>%
rowwise() %>%
mutate(emails = ifelse(is.null(emails), "-", emails)) %>%
mutate(phones = ifelse(is.null(phones), "-", phones)) %>%
mutate(urls = ifelse(is.null(urls), "-", urls)) %>%
mutate(party = ifelse(is.na(party), "-", party)) %>%
mutate(photoUrl) = ifelse(is.na(photoUrl), "-", photoUrl)
response_content <- content(response, "text")
photos_col <- officials_table$photoUrl
draw_table("Seattle, Washington")
##    Note: you can submit the requests through your browser.  If unsure, or if
##    httr::GET gives you an error, you may always put the address in your browser's
##    address bar.  If correct, it will display the corresponding JSON data.  If
##    incorrect, you get an error message.
library(httr)
library(jsonlite)
library(dplyr)
library(tidyr)
source("keys.R")
draw_table("Seattle, Washington")
getwd()
source('~/Desktop/Info201/a6-apis-slayers/process-data.R')
draw_table("Bend, Oregon")
source('~/Desktop/Info201/a6-apis-slayers/process-data.R')
draw_table("Bend, Oregon")
shiny::runApp('C:/Users/Isabella/Desktop/Info201/a8-app-igarcia8/A8')
runApp('C:/Users/Isabella/Desktop/Info201/slayers-final-project')
setwd("C:/Users/Isabella/Desktop/Info201/slayers-final-project")
data <- read.csv("data/tmdb_5000_credits.csv")
View(data)
data <- read.csv("data/tmdb_5000_movies.csv")
View(data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?hr()
runApp()
runApp()
library(dplyr)
gen <- data %>% select(genres)
View(gen)
View(install.packages())
View(installed.packages())
g <- unnest(data, genres)
install.packages("tidyverse")
library(tidyverse)
g <- unnest(data, genres)
View(g)
g <- unnest(gen)
View(g)
g <- unnest(data, genres)
View(g)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?tabPanel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("C:/Users/Isabella/Desktop/Info201/slayers-final-project")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinythemes")
runApp()
runApp()
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?actionButton
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(shiny)
library(markdown)
library(shinythemes)
library(shinytheme)
install.packages("shinythemes")
library(shinythemes)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
