## -------------------- Defining variables --------------------
## Here we ask you to define, compute, and print a number of variables
## ---------- Example: ----------
## Create variable `my_name` that is equal to your first name
my_name <- "Luyi"
cat("I am", my_name, "\n")
## Create a vector `movies` that contains the names of six movies you like
## Always print your results!
movies <- c("Avengers", "Green Book", "Interstellar", "Alita", "Brooklyn", "Harry Potter")
cat(movies, "\n")
## Create a vector `top_three` that only contains the first three movies in the vector.
## Use indexing.
top_three <- movies[1:3]
cat(top_three, "\n")
## Using your vector and the paste method, create a vector `excited` that adds the phrase -
## " is a great movie!" to the end of each element in your movies vector
excited <- paste(movies, "is a great movies!")
cat(excited)
## Create a vector `without_four` that has your first three movies, and your 5th and 6th movies.
without_four <- movies[-4]
cat(without_four)
## Create a vector `numbers` that is the numbers 700 through 999
numbers <- seq(700, 999)
cat(numbers, "\n")
## Using the built in length function, create a variable `len` that is equal to the length of your vector
## `numbers`
len <- seq_len(numbers)
## Using the built in length function, create a variable `len` that is equal to the length of your vector
## `numbers`
len <- seq_len(numbers)
## Using the built in length function, create a variable `len` that is equal to the length of your vector
## `numbers`
len <- length(numbers)
cat(len)
## Using the `mean` function, create a variable `numbers_mean` that is the mean of your vector `numbers`
numbers_mean <- mean(numbers)
cat(numbers_mean, "\n")
## Using the `median` function, create a variable `numbers_median` that is the median of your vector `numbers`
numbers_median <- median(numbers)
cat(numbers_median, "\n")
## Create a vector `lower_numbers` that is the numbers 600:699
lower_numbers <- seq(600, 699)
cat(lower_numbers, "\n")
## Create a vector `all_numbers` that combines your `lower_numbers` and `numbers` vectors
all_numbers <- lower_numbers + numbers
cat(all_numbers, "\n")
## Create a vector `all_numbers` that combines your `lower_numbers` and `numbers` vectors
all_numbers <- append(numbers, lower_numbers)
cat(all_numbers, "\n")
## Create a vector `all_numbers` that combines your `lower_numbers` and `numbers` vectors
all_numbers <- append(lower_numbers, numbers)
cat(all_numbers, "\n")
append(1:5, 0:1, after = 3)
(lubridate)
install.packages("lubridate")
library(lubridate)
library(tidyverse)
library(tidyverse)
## a2-foundational-skills
## -------------------- Set up --------------------
## In this assignment we ask you to use `stringr` package for the string functions.
## Read more about it in Wickham & Grolemund "R for Data Science"
## http://r4ds.had.co.nz/strings.html
## Install the library if needed and load it
## Ensure you don't install the library more than once!
library(stringr)
library(lubridate)
## -------------------- Defining variables --------------------
## Here we ask you to define, compute, and print a number of variables
## ---------- Example: ----------
## Create variable `my_name` that is equal to your first name
my_name <- "Luyi"
cat("I am", my_name, "\n")
## ---------- end of the example ----------
## Create a numeric variable `my_age` that is equal to your age
my_age <- 21
cat(my_age, "\n")
## Using multiplication, create a variable `minutes_in_day` that is equal to the number of minutes in a day
minutes_in_day <- 60*24
cat(minutes_in_day, "\n")
## Using multiplication, create a variable `hours_in_year` that is the number of hours in a year
hours_in_year <- 24*365
cat(hours_in_year, "\n")
## Create a variable `minutes_rule` that is a boolean value (TRUE/FALSE) by logical operations
## It should be TRUE if there are more minutes in a day than hours in a year, otherwise FALSE
minutes_rule <- minutes_in_day > hours_in_year
cat(minutes_rule, "\n")
## Compute the following a bit useful numbers.
## Assign the results to suitably named variables.
##
## How many seconds are there in year?
second_in_year <- 60*minutes_in_day
cat(second_in_year, "\n")
## How many seconds is a typical human lifetime?
second_in_lifetime <- 79*second_in_year
cat(second_in_lifetime, "\n")
## Age of the universe is 13.8 billion years.  What is it's age in seconds?
universe_age_in_second <- 13.8e9*second_in_year
cat(universe_age_in_second, "\n")
## Comment:
## If you estimate, based on timings on a small dataset, that your task on the full data
## takes more than this many seconds on a fast computer,
## we can safely say that your code fails :-)
### -------------------- Working with functions --------------------
## Write a function called `make_introduction` that takes in two arguments: name, and age.
## This function should return a string value that says something like "Hello, my name is {name}, and I'm
## {age} years old".
make_introduction <- function(name, age) {
introduction <- paste("Hello, my name is ", name, ", and I'm ", age, " years old", sep="")
introduction
}
## Create a variable `my_intro` by passing your variables `my_name` and `my_age` into your `make_introduction`
## function.  Always print the result!
my_intro <- make_introduction(my_name, my_age)
cat(my_intro, "\n")
## Create a variable `casual_intro` by substituting "Hello, my name is ", with "Hey, I'm " in your `my_intro`
## variable.  Check out base R functions 'sub' and 'gsub', and stringr functions 'str_replace' and 'str_replace_all'
casual_intro <- sub("Hello, my name is ", "Hey, I'm ", my_intro)
cat(casual_intro, "\n")
## Create a new variable `loud_intro`, which is your `my_intro` variable in all upper-case letters
loud_intro <- toupper(my_intro)
cat(loud_intro, "\n")
## Create a new variable `quiet_intro`, which is your `my_intro` variable in all lower-case letters
quiet_intro <- tolower(my_intro)
cat(quiet_intro, "\n")
## Create a new variable capitalized, which is your `my_intro` variable with each word capitalized
## hint: consult the stringr function `str_to_title`
cap_intro <- str_to_title(my_intro)
cat(cap_intro, "\n")
## Using the `str_count` function, create a variable `occurrences` that stores the # of times the letter "e"
## appears in `my_intro`
occurrences <- str_count(my_intro, pattern = "e")
cat(occurrences)
## Write another function `double` that takes in a (numeric) variable and returns that variable times two
double <- function(x) {
x <- 2*x
x
}
## Using your `double` function, create a variable `minutes_in_two_days`, which is the number of minutes in
## two days
minutes_in_two_days <- double(minutes_in_day)
cat(minutes_in_two_days, "\n")
## Write another function `third_power` that takes in a value and returns that value cubed
third_power <- function(x) {
x <- x^3
x
}
## Create a variable `twenty_seven`` by passing the number 3 to your `cube` function
twenty_seven <- third_power(3)
cat(twenty_seven, "\n")
### ------------------------------ working with vectors ------------------------------
## Create a vector `movies` that contains the names of six movies you like
## Always print your results!
movies <- c("Avengers", "Green Book", "Interstellar", "Alita", "Brooklyn", "Harry Potter")
cat(movies, "\n")
## Create a vector `top_three` that only contains the first three movies in the vector.
## Use indexing.
top_three <- movies[1:3]
cat(top_three, "\n")
## Using your vector and the paste method, create a vector `excited` that adds the phrase -
## " is a great movie!" to the end of each element in your movies vector
excited <- paste(movies, "is a great movies!")
cat(excited, "\n")
## Create a vector `without_four` that has your first three movies, and your 5th and 6th movies.
without_four <- movies[-4]
cat(without_four, "\n")
## Create a vector `numbers` that is the numbers 700 through 999
numbers <- seq(700, 999)
cat(numbers, "\n")
## Using the built in length function, create a variable `len` that is equal to the length of your vector
## `numbers`
len <- length(numbers)
cat(len, "\n")
## Using the `mean` function, create a variable `numbers_mean` that is the mean of your vector `numbers`
numbers_mean <- mean(numbers)
cat(numbers_mean, "\n")
## Using the `median` function, create a variable `numbers_median` that is the median of your vector `numbers`
numbers_median <- median(numbers)
cat(numbers_median, "\n")
## Create a vector `lower_numbers` that is the numbers 600:699
lower_numbers <- seq(600, 699)
cat(lower_numbers, "\n")
## Create a vector `all_numbers` that combines your `lower_numbers` and `numbers` vectors
all_numbers <- append(lower_numbers, numbers)
cat(all_numbers, "\n")
### -------------------- Dates --------------------
## you may also consult 'lubridate' package for additional date-time functionality
## Use the `as.Date()` function to create a variable `today` that represents today's date
## You can pass in a character string of the day you wrote this, or you can get the current date
## Hint: check documentation for 'Sys.time' and 'Sys.Date'
## Always print your results!
## Note: if you just 'cat' a date, it justprints the unix epoch number.  Try to 'format' the date like
## cat(format(date))
## Create a variable `anniversary` that represents the 50th anniversary of the first Moon landings (July 20, 2019).
## Make sure to use the `as.Date` function again
## Create a variable `days_to_anniversary` that is how many days until the anniversary (hint: subtract the dates!)
## Define a function called `bday_intro` that takes in three arguments:
## a name, an age, and a character string for your next (upcoming) birthday.
## This method should return a character string of the format:
##  "Hello, my name is {name} and I'm {age} years old. In {N} days I'll be {new_age}"
## You should utilize your `make_introduction` function from Part 1, and compute {N} and {new_age} in your
## function
## Create a variable `my_bday_intro` using the `bday_intro` function, passing in `my_name`, `my_age`,
## and your upcoming birthday.
## Note: you may look up 'lubridate' package by Hadley Wickham for more convenient handling of dates
### -------------------- Challenge --------------------
## Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a
## *vector of strings*.
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
mydates <- as.Date(c("2007-06-22", "2004-02-13"))
mydates
## Use the `as.Date()` function to create a variable `today` that represents today's date
## You can pass in a character string of the day you wrote this, or you can get the current date
## Hint: check documentation for 'Sys.time' and 'Sys.Date'
## Always print your results!
## Note: if you just 'cat' a date, it justprints the unix epoch number.  Try to 'format' the date like
## cat(format(date))
today <- as.Date("2019-04-18")
cat(format(today))
## Use the `as.Date()` function to create a variable `today` that represents today's date
## You can pass in a character string of the day you wrote this, or you can get the current date
## Hint: check documentation for 'Sys.time' and 'Sys.Date'
## Always print your results!
## Note: if you just 'cat' a date, it justprints the unix epoch number.  Try to 'format' the date like
## cat(format(date))
today <- as.Date(c(Sys.time(), Sys.Date()))
cat(format(today))
Sys.Date()
Sys.time()
## Use the `as.Date()` function to create a variable `today` that represents today's date
## You can pass in a character string of the day you wrote this, or you can get the current date
## Hint: check documentation for 'Sys.time' and 'Sys.Date'
## Always print your results!
## Note: if you just 'cat' a date, it justprints the unix epoch number.  Try to 'format' the date like
## cat(format(date))
today <- as.Date(Sys.Date())
cat(format(today))
today <- as.Date(Sys.Date())
cat(today)
## Create a variable `anniversary` that represents the 50th anniversary of the first Moon landings (July 20, 2019).
## Make sure to use the `as.Date` function again
anniversary <- as.Date("July 20, 2019")
## Create a variable `anniversary` that represents the 50th anniversary of the first Moon landings (July 20, 2019).
## Make sure to use the `as.Date` function again
anniversary <- as.Date("2019-07-20")
cat(format(anniversary))
## Create a variable `days_to_anniversary` that is how many days until the anniversary (hint: subtract the dates!)
days_to_anniversary <- anniversary - today
cat(format(days_to_anniversary), "\n")
cat(days_to_anniversary, "\n")
cat(format(days_to_anniversary), "\n")
## Define a function called `bday_intro` that takes in three arguments:
## a name, an age, and a character string for your next (upcoming) birthday.
## This method should return a character string of the format:
##  "Hello, my name is {name} and I'm {age} years old. In {N} days I'll be {new_age}"
## You should utilize your `make_introduction` function from Part 1, and compute {N} and {new_age} in your
## function
bday_intro <- function(name, age, next_birthday) {
next_birthday <- as.Date(next_birthday)
days <- next_birthday - today
new_age <- age + 1
intro <- paste(make_introduction(name, age), ". In ", days, " days I'll be ", new_age, sep="" )
intro
}
## Create a variable `my_bday_intro` using the `bday_intro` function, passing in `my_name`, `my_age`,
## and your upcoming birthday.
my_bday_intro(my_name, my_age, "2019-09-07")
## Create a variable `my_bday_intro` using the `bday_intro` function, passing in `my_name`, `my_age`,
## and your upcoming birthday.
my_bday_intro <- bday_intro(my_name, my_age, "2019-09-07")
cat(my_bday_intro)
### -------------------- Challenge --------------------
## Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a
## *vector of strings*.
RemoveDigits <- function(x) {
for (i in 1:length(x)) {
x <- str_replace(x, "[0123456789]", "")
}
x
}
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
print(RemoveDigits(c("INFO 201", "CSE 142", "mps-803c")))
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
cat(RemoveDigits(c("INFO 201", "CSE 142", "mps-803c")))
paste(seq(0,9))
paste(seq(0,9),library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server))
paste(seq(0,9),seq="")
x <- paste(seq(0,9),seq="")
### -------------------- Challenge --------------------
## Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a
## *vector of strings*.
RemoveDigits <- function(x) {
for (i in 1:length(x)) {
c <- paste(seq(0,9),seq="")
x <- str_replace(x, "[c]", "")
}
x
}
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
cat(RemoveDigits(c("INFO 201", "CSE 142", "mps-803c")))
### -------------------- Challenge --------------------
## Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a
## *vector of strings*.
RemoveDigits <- function(x) {
for (i in 1:length(x)) {
c <- paste(seq(0,9),seq="")
x <- str_replace(x, c, "")
}
x
}
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
cat(RemoveDigits(c("INFO 201", "CSE 142", "mps-803c")))
### -------------------- Challenge --------------------
## Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a
## *vector of strings*.
RemoveDigits <- function(x) {
for (i in 1:length(x)) {
x <- str_replace(x, "[0123456789]", "")
}
x
}
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
cat(RemoveDigits(c("INFO 201", "CSE 142", "mps-803c")))
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
statement <- c("INFO 201", "CSE 142", "mps-803c")
cat(RemoveDigits(statement))
print("Oh no!")
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
if (RemovesDigits(statement) != statement) {
print("Oh no!")
} else print("Yay!")
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
if (RemoveDigits(statement) != statement) {
print("Oh no!")
} else print("Yay!")
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
if (str_length(RemoveDigits(statement)) != str_length(statement)) {
print("Oh no!")
} else print("Yay!")
statement <- c("INFO 201", "CSE 142", "mps-803c")
str_length(statement)
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
if (str_length(str_c(RemoveDigits(statement), collapse = "") != str_length(str_c(statement, collapse = "")))) {
print("Oh no!")
} else print("Yay!")
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
if (str_c(RemoveDigits(statement), collapse = "") != str_c(statement, collapse = ""))) {
print("Oh no!")
} else print("Yay!")
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
if (str_c(RemoveDigits(statement), collapse = "") != str_c(statement, collapse = "")) {
print("Oh no!")
} else print("Yay!")
str_c(RemoveDigits(statement), collapse = ""
str_c(RemoveDigits(statement), collapse = "")
str_c(RemoveDigits(statement), collapse = "")
str_c(statement, collapse = "")
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
if (str_c(RemoveDigits(statement), collapse = " ") != str_c(statement, collapse = " ")) {
print("Oh no!")
} else print("Yay!")
str_c(statement, collapse = " ")
str_c(RemoveDigits(statement), collapse = " ")
cat(RemoveDigits(statement))
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
if (str_c(RemoveDigits(statement), collapse = " ") != str_c(statement, collapse = " ")) {
print("Oh no!")
} else print("Yay!")
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
if (str_c(RemoveDigits(statement), collapse = " ") != str_c(statement, collapse = " ")) {
print("Oh no!")
} else print("Yay!")
cat(RemoveDigits(statement))
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
if (str_c(RemoveDigits(statement), collapse = "") != str_c(statement, collapse = "")) {
print("Oh no!")
} else print("Yay!")
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
statement <- c("INFO ", "CSE ", "mps-c")
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
if (str_c(RemoveDigits(statement), collapse = "") != str_c(statement, collapse = "")) {
print("Oh no!")
} else print("Yay!")
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
if (str_c(RemoveDigits(statement), collapse = " ") != str_c(statement, collapse = " ")) {
print("Oh no!")
} else print("Yay!")
cat(RemoveDigits(statement))
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
statement <- c("INFO 201", "CSE 142", "mps-803c")
cat(RemoveDigits(statement))
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
if (str_c(RemoveDigits(statement), collapse = " ") != str_c(statement, collapse = " ")) {
print("Oh no!")
} else print("Yay!")
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
statement <- c("INFO ", "CSE ", "mps-c")
cat(RemoveDigits(statement))
## Write an if/else statement that checks to see if your vector has any digits. If it does have
## digits, print "Oh no!", if it does not then print "Yay!"
if (str_c(RemoveDigits(statement), collapse = " ") != str_c(statement, collapse = " ")) {
print("Oh no!")
} else print("Yay!")
source("assignment.R")
source("assignment.R")
source('~/Desktop/INFO_201/a2-basic-coding-luyij/assignment.R')
source('~/Desktop/INFO_201/a2-basic-coding-luyij/assignment.R')
### -------------------- Challenge --------------------
## Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a
## *vector of strings*.
RemoveDigits <- function(x) {
x <- str_replace(x, "[0123456789]", "")
x
}
source('~/Desktop/INFO_201/a2-basic-coding-luyij/assignment.R')
source('~/Desktop/INFO_201/a2-basic-coding-luyij/assignment.R')
source('~/Desktop/INFO_201/a2-basic-coding-luyij/assignment.R')
source('~/Desktop/INFO_201/a2-basic-coding-luyij/assignment.R')
source('~/Desktop/INFO_201/a2-basic-coding-luyij/assignment.R')
source('~/Desktop/INFO_201/a2-basic-coding-luyij/assignment.R')
source('~/Desktop/INFO_201/a2-basic-coding-luyij/assignment.R')
source('~/Desktop/INFO_201/a2-basic-coding-luyij/assignment.R')
source('~/Desktop/INFO_201/a2-basic-coding-luyij/assignment.R')
source('~/Desktop/INFO_201/a2-basic-coding-luyij/assignment.R')
source('~/Desktop/INFO_201/a2-basic-coding-luyij/assignment.R')
source('~/Desktop/INFO_201/a2-basic-coding-luyij/assignment.R')
source('~/Desktop/INFO_201/a2-basic-coding-luyij/assignment.R')
statement <- c("INFO 201", "CSE 142", "mps-803c")
length(statement)
source('~/Desktop/INFO_201/a2-basic-coding-luyij/assignment.R')
source('~/Desktop/INFO_201/a2-basic-coding-luyij/assignment.R')
source('~/Desktop/INFO_201/a2-basic-coding-luyij/assignment.R')
source('~/Desktop/INFO_201/a2-basic-coding-luyij/assignment.R')
source('~/Desktop/INFO_201/a2-basic-coding-luyij/assignment.R')
source('~/Desktop/INFO_201/a2-basic-coding-luyij/assignment.R')
source('~/Desktop/INFO_201/a2-basic-coding-luyij/assignment.R')
## Create a vector `lower_numbers` that is the numbers 600:699
lower_numbers <- seq(600, 699)
cat(lower_numbers, "\n")
## Create a vector `all_numbers` that combines your `lower_numbers` and `numbers` vectors
all_numbers <- c(lower_numbers, numbers)
## Create a vector `numbers` that is the numbers 700 through 999
numbers <- seq(700, 999)
## Create a vector `all_numbers` that combines your `lower_numbers` and `numbers` vectors
all_numbers <- c(lower_numbers, numbers)
cat(all_numbers, "\n")
source('~/Desktop/INFO_201/a2-basic-coding-luyij/assignment.R')
source('~/Desktop/INFO_201/a2-basic-coding-luyij/assignment.R')
1e9
format(1e9)
source('~/Desktop/INFO_201/a2-basic-coding-luyij/assignment.R')
source('~/Desktop/INFO_201/a2-basic-coding-luyij/assignment.R')
source('~/Desktop/INFO_201/a2-basic-coding-luyij/assignment.R')
source('~/Desktop/INFO_201/a2-basic-coding-luyij/assignment.R')
source('~/Desktop/INFO_201/a2-basic-coding-luyij/assignment.R')
shiny::runApp('Desktop/INFO_201/a8-app-luyij')
runApp('Desktop/INFO_201/a8-app-luyij')
runApp('Desktop/INFO_201/a8-app-luyij')
runApp('Desktop/INFO_201/a8-app-luyij')
runApp('Desktop/INFO_201/a8-app-luyij')
runApp('Desktop/INFO_201/a8-app-luyij')
c("JUNE", "sep")
C <- c("JUNE", "sep")
length(C)
C(1)
C[1]
paste(C[1:], "and")
paste(C[:], "and")
aste(C[1:2], "and")
paste(C[1:2], "and")
runApp('Desktop/INFO_201/a8-app-luyij')
runApp('Desktop/INFO_201/a8-app-luyij')
runApp('Desktop/INFO_201/a8-app-luyij')
shiny::runApp('Desktop/INFO_201/a8-app-luyij')
runApp('Desktop/INFO_201/a8-app-luyij')
shiny::runApp('Desktop/INFO_201/a8-app-luyij')
runApp('Desktop/INFO_201/a8-app-luyij')
runApp('Desktop/INFO_201/slayers-final-project')
setwd("/Users/l0uisej/Desktop/INFO_201/slayers-final-project")
runApp()
runApp()
runApp()
